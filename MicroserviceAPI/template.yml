#deployed at sam deploy command 
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
    projectid:
        Type: String

Resources:
###Begin microservice application setup
    ApplicationBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Sub 'application-user-data-${projectid}'
            BucketEncryption: 
                ServerSideEncryptionConfiguration:
                    -   ServerSideEncryptionByDefault:
                            SSEAlgorithm: aws:kms 
                            KMSMasterKeyID: alias/aws/s3
    Useritemtable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: 'UserTable'
            ProvisionedThroughput: 
                ReadCapacityUnits: '3'
                WriteCapacityUnits: '3'
            AttributeDefinitions:
                -   
                    AttributeName: 'id'
                    AttributeType: S
                -   
                    AttributeName: 'itempath'
                    AttributeType: S
                -   
                    AttributeName: 'name'
                    AttributeType: S
                -   
                    AttributeName: 'user'
                    AttributeType: S
            KeySchema: 
                -   
                    AttributeName: 'id'
                    KeyType: HASH
                -   
                    AttributeName: 'itempath'
                    KeyType: RANGE
            GlobalSecondaryIndexes: 
                - 
                    IndexName: 'nameindex'
                    KeySchema: 
                        - 
                            AttributeName: 'name'
                            KeyType: 'HASH'
                        - 
                            AttributeName: 'user'
                            KeyType: "RANGE"
                    Projection: 
                        NonKeyAttributes: 
                            - 'id'
                            - 'itempath'
                        ProjectionType: 'INCLUDE'
                    ProvisionedThroughput: 
                        ReadCapacityUnits: '3'
                        WriteCapacityUnits: '3'
    #Lambda application
    Restapi:
        Type: AWS::Serverless::Api
        Properties:
            Name: !Sub 'MainApi${projectid}'
            StageName: 'dev'
            DefinitionBody:
                openapi: '3.0'
                info: {}
                paths:
                    /:
                        post:
                            x-amazon-apigateway-integration:
                                httpMethod: POST
                                type: aws_proxy
                                uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Mainlambdafunction.Arn}:Prod/invocations'
                            contentHandling: CONVERT_TO_BINARY
                            responses: {}
            EndpointConfiguration: REGIONAL
    
    Mainlambdafunction:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub 'MainLambdaMS${projectid}' 
            CodeUri: 'sourcecode/'
            Handler: app.lambda_handler
            Environment:
                Variables:
                    userbucket: !Ref ApplicationBucket
                    usertable: !Ref Useritemtable
            Runtime: python3.7
            Timeout: 12
            AutoPublishAlias: 'Prod'
            Events:
                post:
                    Type: Api
                    Properties:
                        Path: /
                        Method: POST
                        RestApiId: !Ref Restapi
                        
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - 'lambda.amazonaws.com'
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   Version: "2012-10-17"
                    Statement: 
                        -   Effect: Allow
                            Action: 
                                -   'dynamodb:PutItem'
                                -   'dynamodb:GetItem'
                                -   'dynamodb:Query'
                            Resource: !GetAtt Useritemtable.Arn

                        -   Effect: Allow
                            Action: 
                                -   'logs:CreateLogGroup'
                                -   'logs:CreateLogStream'
                                -   'logs:PutLogEvents'
                            Resource: '*'                       
                        -   Effect: Allow
                            Action: 
                                -   's3:PutObject'
                                -   's3:GetObject'
                            Resource: !Join
                                - ''
                                -   - !GetAtt ApplicationBucket.Arn
                                    - '/*'
    FunctionLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub '/aws/lambda/${Mainlambdafunction}'
###End microservice application setup

#outputs main app function ARN as well as alias ARN details
Outputs:
    AppLambdaArn:
        Value: !GetAtt Mainlambdafunction.Arn
        Export:
            Name: !Sub '${AWS::StackName}-AppArn'
    AppLambda:
        Value: !Ref Mainlambdafunction
        Export:
            Name: !Sub '${AWS::StackName}-AppName'
    AliasLambdaArn:
        Value: !Sub '${Mainlambdafunction.Arn}:Prod'
        Export: 
            Name: !Sub '${AWS::StackName}-AliasArn'
    AliasLambda:
        Value: 'Prod'
        Export: 
            Name: !Sub '${AWS::StackName}-AliasName'
